
Driver-and-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000580  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000708  08000710  00001710  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000708  08000708  00001710  2**0
                  CONTENTS
  4 .ARM          00000000  08000708  08000708  00001710  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000708  08000710  00001710  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000708  08000708  00001708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800070c  0800070c  0000170c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001710  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001710  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001710  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000930  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002e3  00000000  00000000  00002070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b0  00000000  00000000  00002358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000079  00000000  00000000  00002408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000020ed  00000000  00000000  00002481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000dbc  00000000  00000000  0000456e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000863e  00000000  00000000  0000532a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000d968  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001fc  00000000  00000000  0000d9ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000093  00000000  00000000  0000dba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080006f0 	.word	0x080006f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080006f0 	.word	0x080006f0

080001c8 <GPIO_PClkCtrl>:
 * @param 	pGPIOx - Base address of the GPIO port
 * @param 	EnorDi - ENABLE or DISABLE macros
 * @return 	- None
 */
void GPIO_PClkCtrl(STRUCT_GPIO_REG_DEF *pGPIOx, uint8_t EnorDi)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	460b      	mov	r3, r1
 80001d2:	70fb      	strb	r3, [r7, #3]
	//peripheral clock ENABLE AND DISABLE FOR GPIOx
	if(EnorDi == ENABLE)
 80001d4:	78fb      	ldrb	r3, [r7, #3]
 80001d6:	2b01      	cmp	r3, #1
 80001d8:	d14b      	bne.n	8000272 <GPIO_PClkCtrl+0xaa>
	{
		//enable clock for GPIOx
		switch((uint32_t)pGPIOx)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4a4a      	ldr	r2, [pc, #296]	@ (8000308 <GPIO_PClkCtrl+0x140>)
 80001de:	4293      	cmp	r3, r2
 80001e0:	d040      	beq.n	8000264 <GPIO_PClkCtrl+0x9c>
 80001e2:	4a49      	ldr	r2, [pc, #292]	@ (8000308 <GPIO_PClkCtrl+0x140>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	f200 8088 	bhi.w	80002fa <GPIO_PClkCtrl+0x132>
 80001ea:	4a48      	ldr	r2, [pc, #288]	@ (800030c <GPIO_PClkCtrl+0x144>)
 80001ec:	4293      	cmp	r3, r2
 80001ee:	d032      	beq.n	8000256 <GPIO_PClkCtrl+0x8e>
 80001f0:	4a46      	ldr	r2, [pc, #280]	@ (800030c <GPIO_PClkCtrl+0x144>)
 80001f2:	4293      	cmp	r3, r2
 80001f4:	f200 8081 	bhi.w	80002fa <GPIO_PClkCtrl+0x132>
 80001f8:	4a45      	ldr	r2, [pc, #276]	@ (8000310 <GPIO_PClkCtrl+0x148>)
 80001fa:	4293      	cmp	r3, r2
 80001fc:	d024      	beq.n	8000248 <GPIO_PClkCtrl+0x80>
 80001fe:	4a44      	ldr	r2, [pc, #272]	@ (8000310 <GPIO_PClkCtrl+0x148>)
 8000200:	4293      	cmp	r3, r2
 8000202:	d87a      	bhi.n	80002fa <GPIO_PClkCtrl+0x132>
 8000204:	4a43      	ldr	r2, [pc, #268]	@ (8000314 <GPIO_PClkCtrl+0x14c>)
 8000206:	4293      	cmp	r3, r2
 8000208:	d017      	beq.n	800023a <GPIO_PClkCtrl+0x72>
 800020a:	4a42      	ldr	r2, [pc, #264]	@ (8000314 <GPIO_PClkCtrl+0x14c>)
 800020c:	4293      	cmp	r3, r2
 800020e:	d874      	bhi.n	80002fa <GPIO_PClkCtrl+0x132>
 8000210:	4a41      	ldr	r2, [pc, #260]	@ (8000318 <GPIO_PClkCtrl+0x150>)
 8000212:	4293      	cmp	r3, r2
 8000214:	d003      	beq.n	800021e <GPIO_PClkCtrl+0x56>
 8000216:	4a41      	ldr	r2, [pc, #260]	@ (800031c <GPIO_PClkCtrl+0x154>)
 8000218:	4293      	cmp	r3, r2
 800021a:	d007      	beq.n	800022c <GPIO_PClkCtrl+0x64>
				//disable clock for GPIOH
				GPIOH_PCLK_DI();
				break;
		}
	}
}
 800021c:	e06d      	b.n	80002fa <GPIO_PClkCtrl+0x132>
				GPIOA_PCLK_EN();
 800021e:	4b40      	ldr	r3, [pc, #256]	@ (8000320 <GPIO_PClkCtrl+0x158>)
 8000220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000222:	4a3f      	ldr	r2, [pc, #252]	@ (8000320 <GPIO_PClkCtrl+0x158>)
 8000224:	f043 0301 	orr.w	r3, r3, #1
 8000228:	6313      	str	r3, [r2, #48]	@ 0x30
				break;
 800022a:	e066      	b.n	80002fa <GPIO_PClkCtrl+0x132>
				GPIOB_PCLK_EN();
 800022c:	4b3c      	ldr	r3, [pc, #240]	@ (8000320 <GPIO_PClkCtrl+0x158>)
 800022e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000230:	4a3b      	ldr	r2, [pc, #236]	@ (8000320 <GPIO_PClkCtrl+0x158>)
 8000232:	f043 0302 	orr.w	r3, r3, #2
 8000236:	6313      	str	r3, [r2, #48]	@ 0x30
				break;
 8000238:	e05f      	b.n	80002fa <GPIO_PClkCtrl+0x132>
				GPIOC_PCLK_EN();
 800023a:	4b39      	ldr	r3, [pc, #228]	@ (8000320 <GPIO_PClkCtrl+0x158>)
 800023c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800023e:	4a38      	ldr	r2, [pc, #224]	@ (8000320 <GPIO_PClkCtrl+0x158>)
 8000240:	f043 0304 	orr.w	r3, r3, #4
 8000244:	6313      	str	r3, [r2, #48]	@ 0x30
				break;
 8000246:	e058      	b.n	80002fa <GPIO_PClkCtrl+0x132>
				GPIOD_PCLK_EN();
 8000248:	4b35      	ldr	r3, [pc, #212]	@ (8000320 <GPIO_PClkCtrl+0x158>)
 800024a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800024c:	4a34      	ldr	r2, [pc, #208]	@ (8000320 <GPIO_PClkCtrl+0x158>)
 800024e:	f043 0308 	orr.w	r3, r3, #8
 8000252:	6313      	str	r3, [r2, #48]	@ 0x30
				break;
 8000254:	e051      	b.n	80002fa <GPIO_PClkCtrl+0x132>
				GPIOE_PCLK_EN();
 8000256:	4b32      	ldr	r3, [pc, #200]	@ (8000320 <GPIO_PClkCtrl+0x158>)
 8000258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800025a:	4a31      	ldr	r2, [pc, #196]	@ (8000320 <GPIO_PClkCtrl+0x158>)
 800025c:	f043 0310 	orr.w	r3, r3, #16
 8000260:	6313      	str	r3, [r2, #48]	@ 0x30
				break;
 8000262:	e04a      	b.n	80002fa <GPIO_PClkCtrl+0x132>
				GPIOH_PCLK_EN();
 8000264:	4b2e      	ldr	r3, [pc, #184]	@ (8000320 <GPIO_PClkCtrl+0x158>)
 8000266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000268:	4a2d      	ldr	r2, [pc, #180]	@ (8000320 <GPIO_PClkCtrl+0x158>)
 800026a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800026e:	6313      	str	r3, [r2, #48]	@ 0x30
				break;
 8000270:	e043      	b.n	80002fa <GPIO_PClkCtrl+0x132>
		switch((uint32_t)pGPIOx)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	4a24      	ldr	r2, [pc, #144]	@ (8000308 <GPIO_PClkCtrl+0x140>)
 8000276:	4293      	cmp	r3, r2
 8000278:	d039      	beq.n	80002ee <GPIO_PClkCtrl+0x126>
 800027a:	4a23      	ldr	r2, [pc, #140]	@ (8000308 <GPIO_PClkCtrl+0x140>)
 800027c:	4293      	cmp	r3, r2
 800027e:	d83c      	bhi.n	80002fa <GPIO_PClkCtrl+0x132>
 8000280:	4a22      	ldr	r2, [pc, #136]	@ (800030c <GPIO_PClkCtrl+0x144>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d02d      	beq.n	80002e2 <GPIO_PClkCtrl+0x11a>
 8000286:	4a21      	ldr	r2, [pc, #132]	@ (800030c <GPIO_PClkCtrl+0x144>)
 8000288:	4293      	cmp	r3, r2
 800028a:	d836      	bhi.n	80002fa <GPIO_PClkCtrl+0x132>
 800028c:	4a20      	ldr	r2, [pc, #128]	@ (8000310 <GPIO_PClkCtrl+0x148>)
 800028e:	4293      	cmp	r3, r2
 8000290:	d021      	beq.n	80002d6 <GPIO_PClkCtrl+0x10e>
 8000292:	4a1f      	ldr	r2, [pc, #124]	@ (8000310 <GPIO_PClkCtrl+0x148>)
 8000294:	4293      	cmp	r3, r2
 8000296:	d830      	bhi.n	80002fa <GPIO_PClkCtrl+0x132>
 8000298:	4a1e      	ldr	r2, [pc, #120]	@ (8000314 <GPIO_PClkCtrl+0x14c>)
 800029a:	4293      	cmp	r3, r2
 800029c:	d015      	beq.n	80002ca <GPIO_PClkCtrl+0x102>
 800029e:	4a1d      	ldr	r2, [pc, #116]	@ (8000314 <GPIO_PClkCtrl+0x14c>)
 80002a0:	4293      	cmp	r3, r2
 80002a2:	d82a      	bhi.n	80002fa <GPIO_PClkCtrl+0x132>
 80002a4:	4a1c      	ldr	r2, [pc, #112]	@ (8000318 <GPIO_PClkCtrl+0x150>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d003      	beq.n	80002b2 <GPIO_PClkCtrl+0xea>
 80002aa:	4a1c      	ldr	r2, [pc, #112]	@ (800031c <GPIO_PClkCtrl+0x154>)
 80002ac:	4293      	cmp	r3, r2
 80002ae:	d006      	beq.n	80002be <GPIO_PClkCtrl+0xf6>
}
 80002b0:	e023      	b.n	80002fa <GPIO_PClkCtrl+0x132>
				GPIOA_PCLK_DI();
 80002b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000320 <GPIO_PClkCtrl+0x158>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000320 <GPIO_PClkCtrl+0x158>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	631a      	str	r2, [r3, #48]	@ 0x30
				break;
 80002bc:	e01d      	b.n	80002fa <GPIO_PClkCtrl+0x132>
				GPIOB_PCLK_DI();
 80002be:	4b18      	ldr	r3, [pc, #96]	@ (8000320 <GPIO_PClkCtrl+0x158>)
 80002c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002c2:	4b17      	ldr	r3, [pc, #92]	@ (8000320 <GPIO_PClkCtrl+0x158>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	631a      	str	r2, [r3, #48]	@ 0x30
				break;
 80002c8:	e017      	b.n	80002fa <GPIO_PClkCtrl+0x132>
				GPIOC_PCLK_DI();
 80002ca:	4b15      	ldr	r3, [pc, #84]	@ (8000320 <GPIO_PClkCtrl+0x158>)
 80002cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ce:	4b14      	ldr	r3, [pc, #80]	@ (8000320 <GPIO_PClkCtrl+0x158>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	631a      	str	r2, [r3, #48]	@ 0x30
				break;
 80002d4:	e011      	b.n	80002fa <GPIO_PClkCtrl+0x132>
				GPIOD_PCLK_DI();
 80002d6:	4b12      	ldr	r3, [pc, #72]	@ (8000320 <GPIO_PClkCtrl+0x158>)
 80002d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002da:	4b11      	ldr	r3, [pc, #68]	@ (8000320 <GPIO_PClkCtrl+0x158>)
 80002dc:	2200      	movs	r2, #0
 80002de:	631a      	str	r2, [r3, #48]	@ 0x30
				break;
 80002e0:	e00b      	b.n	80002fa <GPIO_PClkCtrl+0x132>
				GPIOE_PCLK_DI();
 80002e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000320 <GPIO_PClkCtrl+0x158>)
 80002e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000320 <GPIO_PClkCtrl+0x158>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	631a      	str	r2, [r3, #48]	@ 0x30
				break;
 80002ec:	e005      	b.n	80002fa <GPIO_PClkCtrl+0x132>
				GPIOH_PCLK_DI();
 80002ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000320 <GPIO_PClkCtrl+0x158>)
 80002f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000320 <GPIO_PClkCtrl+0x158>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	631a      	str	r2, [r3, #48]	@ 0x30
				break;
 80002f8:	bf00      	nop
}
 80002fa:	bf00      	nop
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	40021c00 	.word	0x40021c00
 800030c:	40021000 	.word	0x40021000
 8000310:	40020c00 	.word	0x40020c00
 8000314:	40020800 	.word	0x40020800
 8000318:	40020000 	.word	0x40020000
 800031c:	40020400 	.word	0x40020400
 8000320:	40023800 	.word	0x40023800

08000324 <GPIO_Init>:
 * @brief Initializes the specified GPIO port.
 * @details This function is used to initialize the specified GPIO port.
 * @param pGPIOHandle: Pointer to the GPIO handler structure.
 */
void GPIO_Init(STRUCT_GPIO_HANDLER *pGPIOHandle )
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b086      	sub	sp, #24
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	/*
	 * 0. ENABLING THE CLOCK FOR RESPECTIVE REGISTER
	 */
	GPIO_PClkCtrl(pGPIOHandle->pGPIOx, ENABLE);
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	2101      	movs	r1, #1
 8000332:	4618      	mov	r0, r3
 8000334:	f7ff ff48 	bl	80001c8 <GPIO_PClkCtrl>
	/*
	 * 1. CONFIGURING GPIO MODE USING MDOER REGISTER
	 */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	795b      	ldrb	r3, [r3, #5]
 800033c:	2b03      	cmp	r3, #3
 800033e:	d821      	bhi.n	8000384 <GPIO_Init+0x60>
	{
		/*
		 * Set the bit in the MODER register of the GPIO port to configure the
		 * pin as input or output.
		 */
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	795b      	ldrb	r3, [r3, #5]
 8000344:	461a      	mov	r2, r3
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	791b      	ldrb	r3, [r3, #4]
 800034a:	005b      	lsls	r3, r3, #1
 800034c:	fa02 f303 	lsl.w	r3, r2, r3
 8000350:	613b      	str	r3, [r7, #16]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 <<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	681a      	ldr	r2, [r3, #0]
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	791b      	ldrb	r3, [r3, #4]
 800035c:	4619      	mov	r1, r3
 800035e:	2303      	movs	r3, #3
 8000360:	408b      	lsls	r3, r1
 8000362:	43db      	mvns	r3, r3
 8000364:	4619      	mov	r1, r3
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	400a      	ands	r2, r1
 800036c:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |=   temp;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	6819      	ldr	r1, [r3, #0]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	693a      	ldr	r2, [r7, #16]
 800037a:	430a      	orrs	r2, r1
 800037c:	601a      	str	r2, [r3, #0]
		temp=0;
 800037e:	2300      	movs	r3, #0
 8000380:	613b      	str	r3, [r7, #16]
 8000382:	e086      	b.n	8000492 <GPIO_Init+0x16e>
	}
	else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT )
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	795b      	ldrb	r3, [r3, #5]
 8000388:	2b04      	cmp	r3, #4
 800038a:	d117      	bne.n	80003bc <GPIO_Init+0x98>
		{
			/*
			 * Set the bit in the FTSR register of the EXTI peripheral to enable
			 * falling edge detection for the specified pin.
			 */
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800038c:	4b8f      	ldr	r3, [pc, #572]	@ (80005cc <GPIO_Init+0x2a8>)
 800038e:	68db      	ldr	r3, [r3, #12]
 8000390:	687a      	ldr	r2, [r7, #4]
 8000392:	7912      	ldrb	r2, [r2, #4]
 8000394:	4611      	mov	r1, r2
 8000396:	2201      	movs	r2, #1
 8000398:	408a      	lsls	r2, r1
 800039a:	4611      	mov	r1, r2
 800039c:	4a8b      	ldr	r2, [pc, #556]	@ (80005cc <GPIO_Init+0x2a8>)
 800039e:	430b      	orrs	r3, r1
 80003a0:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003a2:	4b8a      	ldr	r3, [pc, #552]	@ (80005cc <GPIO_Init+0x2a8>)
 80003a4:	689b      	ldr	r3, [r3, #8]
 80003a6:	687a      	ldr	r2, [r7, #4]
 80003a8:	7912      	ldrb	r2, [r2, #4]
 80003aa:	4611      	mov	r1, r2
 80003ac:	2201      	movs	r2, #1
 80003ae:	408a      	lsls	r2, r1
 80003b0:	43d2      	mvns	r2, r2
 80003b2:	4611      	mov	r1, r2
 80003b4:	4a85      	ldr	r2, [pc, #532]	@ (80005cc <GPIO_Init+0x2a8>)
 80003b6:	400b      	ands	r3, r1
 80003b8:	6093      	str	r3, [r2, #8]
 80003ba:	e01a      	b.n	80003f2 <GPIO_Init+0xce>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT )
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	795b      	ldrb	r3, [r3, #5]
 80003c0:	2b05      	cmp	r3, #5
 80003c2:	d116      	bne.n	80003f2 <GPIO_Init+0xce>
		{
			/*
			 * Set the bit in the RTSR register of the EXTI peripheral to enable
			 * rising edge detection for the specified pin.
			 */
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003c4:	4b81      	ldr	r3, [pc, #516]	@ (80005cc <GPIO_Init+0x2a8>)
 80003c6:	689b      	ldr	r3, [r3, #8]
 80003c8:	687a      	ldr	r2, [r7, #4]
 80003ca:	7912      	ldrb	r2, [r2, #4]
 80003cc:	4611      	mov	r1, r2
 80003ce:	2201      	movs	r2, #1
 80003d0:	408a      	lsls	r2, r1
 80003d2:	4611      	mov	r1, r2
 80003d4:	4a7d      	ldr	r2, [pc, #500]	@ (80005cc <GPIO_Init+0x2a8>)
 80003d6:	430b      	orrs	r3, r1
 80003d8:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003da:	4b7c      	ldr	r3, [pc, #496]	@ (80005cc <GPIO_Init+0x2a8>)
 80003dc:	68db      	ldr	r3, [r3, #12]
 80003de:	687a      	ldr	r2, [r7, #4]
 80003e0:	7912      	ldrb	r2, [r2, #4]
 80003e2:	4611      	mov	r1, r2
 80003e4:	2201      	movs	r2, #1
 80003e6:	408a      	lsls	r2, r1
 80003e8:	43d2      	mvns	r2, r2
 80003ea:	4611      	mov	r1, r2
 80003ec:	4a77      	ldr	r2, [pc, #476]	@ (80005cc <GPIO_Init+0x2a8>)
 80003ee:	400b      	ands	r3, r1
 80003f0:	60d3      	str	r3, [r2, #12]
		}

		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	791b      	ldrb	r3, [r3, #4]
 80003f6:	089b      	lsrs	r3, r3, #2
 80003f8:	75fb      	strb	r3, [r7, #23]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	791b      	ldrb	r3, [r3, #4]
 80003fe:	f003 0303 	and.w	r3, r3, #3
 8000402:	75bb      	strb	r3, [r7, #22]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a71      	ldr	r2, [pc, #452]	@ (80005d0 <GPIO_Init+0x2ac>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d024      	beq.n	8000458 <GPIO_Init+0x134>
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a70      	ldr	r2, [pc, #448]	@ (80005d4 <GPIO_Init+0x2b0>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d01d      	beq.n	8000454 <GPIO_Init+0x130>
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a6e      	ldr	r2, [pc, #440]	@ (80005d8 <GPIO_Init+0x2b4>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d016      	beq.n	8000450 <GPIO_Init+0x12c>
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4a6d      	ldr	r2, [pc, #436]	@ (80005dc <GPIO_Init+0x2b8>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d00f      	beq.n	800044c <GPIO_Init+0x128>
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a6b      	ldr	r2, [pc, #428]	@ (80005e0 <GPIO_Init+0x2bc>)
 8000432:	4293      	cmp	r3, r2
 8000434:	d008      	beq.n	8000448 <GPIO_Init+0x124>
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4a6a      	ldr	r2, [pc, #424]	@ (80005e4 <GPIO_Init+0x2c0>)
 800043c:	4293      	cmp	r3, r2
 800043e:	d101      	bne.n	8000444 <GPIO_Init+0x120>
 8000440:	2307      	movs	r3, #7
 8000442:	e00a      	b.n	800045a <GPIO_Init+0x136>
 8000444:	2300      	movs	r3, #0
 8000446:	e008      	b.n	800045a <GPIO_Init+0x136>
 8000448:	2304      	movs	r3, #4
 800044a:	e006      	b.n	800045a <GPIO_Init+0x136>
 800044c:	2303      	movs	r3, #3
 800044e:	e004      	b.n	800045a <GPIO_Init+0x136>
 8000450:	2302      	movs	r3, #2
 8000452:	e002      	b.n	800045a <GPIO_Init+0x136>
 8000454:	2301      	movs	r3, #1
 8000456:	e000      	b.n	800045a <GPIO_Init+0x136>
 8000458:	2300      	movs	r3, #0
 800045a:	757b      	strb	r3, [r7, #21]
		SYNCFG_PCLK_EN();
 800045c:	4b62      	ldr	r3, [pc, #392]	@ (80005e8 <GPIO_Init+0x2c4>)
 800045e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000460:	4a61      	ldr	r2, [pc, #388]	@ (80005e8 <GPIO_Init+0x2c4>)
 8000462:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000466:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1]=portcode<<(temp2*4);
 8000468:	7d7a      	ldrb	r2, [r7, #21]
 800046a:	7dbb      	ldrb	r3, [r7, #22]
 800046c:	009b      	lsls	r3, r3, #2
 800046e:	fa02 f103 	lsl.w	r1, r2, r3
 8000472:	4a5e      	ldr	r2, [pc, #376]	@ (80005ec <GPIO_Init+0x2c8>)
 8000474:	7dfb      	ldrb	r3, [r7, #23]
 8000476:	3302      	adds	r3, #2
 8000478:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		/*
		 * Enable the EXTI interrupt for the specified pin.
		 */
		EXTI->IMR |= 1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800047c:	4b53      	ldr	r3, [pc, #332]	@ (80005cc <GPIO_Init+0x2a8>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	687a      	ldr	r2, [r7, #4]
 8000482:	7912      	ldrb	r2, [r2, #4]
 8000484:	4611      	mov	r1, r2
 8000486:	2201      	movs	r2, #1
 8000488:	408a      	lsls	r2, r1
 800048a:	4611      	mov	r1, r2
 800048c:	4a4f      	ldr	r2, [pc, #316]	@ (80005cc <GPIO_Init+0x2a8>)
 800048e:	430b      	orrs	r3, r1
 8000490:	6013      	str	r3, [r2, #0]
	}

	/*
	 * 2. CONFIGURING OUTPUT REGISTER AS PUSHPULL OR OPEN-DRAIN
	 */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	7a1b      	ldrb	r3, [r3, #8]
 8000496:	461a      	mov	r2, r3
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	791b      	ldrb	r3, [r3, #4]
 800049c:	fa02 f303 	lsl.w	r3, r2, r3
 80004a0:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	685a      	ldr	r2, [r3, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	791b      	ldrb	r3, [r3, #4]
 80004ac:	4619      	mov	r1, r3
 80004ae:	2301      	movs	r3, #1
 80004b0:	408b      	lsls	r3, r1
 80004b2:	43db      	mvns	r3, r3
 80004b4:	4619      	mov	r1, r3
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	400a      	ands	r2, r1
 80004bc:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	6859      	ldr	r1, [r3, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	693a      	ldr	r2, [r7, #16]
 80004ca:	430a      	orrs	r2, r1
 80004cc:	605a      	str	r2, [r3, #4]

	/*
	 * 3. CONFIGURING PIN SPEED USING OSPEEDR REGISTER
	 */
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	799b      	ldrb	r3, [r3, #6]
 80004d2:	461a      	mov	r2, r3
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	791b      	ldrb	r3, [r3, #4]
 80004d8:	005b      	lsls	r3, r3, #1
 80004da:	fa02 f303 	lsl.w	r3, r2, r3
 80004de:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 <<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	689a      	ldr	r2, [r3, #8]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	791b      	ldrb	r3, [r3, #4]
 80004ea:	4619      	mov	r1, r3
 80004ec:	2303      	movs	r3, #3
 80004ee:	408b      	lsls	r3, r1
 80004f0:	43db      	mvns	r3, r3
 80004f2:	4619      	mov	r1, r3
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	400a      	ands	r2, r1
 80004fa:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |=  temp;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	6899      	ldr	r1, [r3, #8]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	693a      	ldr	r2, [r7, #16]
 8000508:	430a      	orrs	r2, r1
 800050a:	609a      	str	r2, [r3, #8]
	temp=0;
 800050c:	2300      	movs	r3, #0
 800050e:	613b      	str	r3, [r7, #16]

	/*
	 * 4. CONFIGURING PULL UP/DOWN USINGPUPDR REGISTER
	 */
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	79db      	ldrb	r3, [r3, #7]
 8000514:	461a      	mov	r2, r3
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	791b      	ldrb	r3, [r3, #4]
 800051a:	005b      	lsls	r3, r3, #1
 800051c:	fa02 f303 	lsl.w	r3, r2, r3
 8000520:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->PUPDR&= ~(0x3 <<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	68da      	ldr	r2, [r3, #12]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	791b      	ldrb	r3, [r3, #4]
 800052c:	4619      	mov	r1, r3
 800052e:	2303      	movs	r3, #3
 8000530:	408b      	lsls	r3, r1
 8000532:	43db      	mvns	r3, r3
 8000534:	4619      	mov	r1, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	400a      	ands	r2, r1
 800053c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR|=temp;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	68d9      	ldr	r1, [r3, #12]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	693a      	ldr	r2, [r7, #16]
 800054a:	430a      	orrs	r2, r1
 800054c:	60da      	str	r2, [r3, #12]
	temp=0;
 800054e:	2300      	movs	r3, #0
 8000550:	613b      	str	r3, [r7, #16]

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTF)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	795b      	ldrb	r3, [r3, #5]
 8000556:	2b02      	cmp	r3, #2
 8000558:	d133      	bne.n	80005c2 <GPIO_Init+0x29e>
	{
		uint8_t temp1, temp2;
		temp1=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	791b      	ldrb	r3, [r3, #4]
 800055e:	08db      	lsrs	r3, r3, #3
 8000560:	73fb      	strb	r3, [r7, #15]
	 	temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	791b      	ldrb	r3, [r3, #4]
 8000566:	f003 0307 	and.w	r3, r3, #7
 800056a:	73bb      	strb	r3, [r7, #14]
	 	/*
		 * Set the bits in the AFR register of the GPIO port to configure the
		 * pin as alternate function.
		 */
	 	pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF <<(4*temp2));
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	7bfa      	ldrb	r2, [r7, #15]
 8000572:	3208      	adds	r2, #8
 8000574:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000578:	7bbb      	ldrb	r3, [r7, #14]
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	220f      	movs	r2, #15
 800057e:	fa02 f303 	lsl.w	r3, r2, r3
 8000582:	43db      	mvns	r3, r3
 8000584:	4618      	mov	r0, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	7bfa      	ldrb	r2, [r7, #15]
 800058c:	4001      	ands	r1, r0
 800058e:	3208      	adds	r2, #8
 8000590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 	pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle ->GPIO_PinConfig.GPIO_PinALTFunction <<(4*temp2));
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	7bfa      	ldrb	r2, [r7, #15]
 800059a:	3208      	adds	r2, #8
 800059c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	7a5b      	ldrb	r3, [r3, #9]
 80005a4:	461a      	mov	r2, r3
 80005a6:	7bbb      	ldrb	r3, [r7, #14]
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	fa02 f303 	lsl.w	r3, r2, r3
 80005ae:	4618      	mov	r0, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	7bfa      	ldrb	r2, [r7, #15]
 80005b6:	4301      	orrs	r1, r0
 80005b8:	3208      	adds	r2, #8
 80005ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 	temp=0;
 80005be:	2300      	movs	r3, #0
 80005c0:	613b      	str	r3, [r7, #16]
	}
}
 80005c2:	bf00      	nop
 80005c4:	3718      	adds	r7, #24
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40013c00 	.word	0x40013c00
 80005d0:	40020000 	.word	0x40020000
 80005d4:	40020400 	.word	0x40020400
 80005d8:	40020800 	.word	0x40020800
 80005dc:	40020c00 	.word	0x40020c00
 80005e0:	40021000 	.word	0x40021000
 80005e4:	40021c00 	.word	0x40021c00
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40013800 	.word	0x40013800

080005f0 <GPIO_Toggle>:
 * @details This function is used to toggle the output state of a GPIO pin.
 * @param pGPIOx: Pointer to the GPIO port base address.
 * @param PinNumber: The GPIO pin number to be toggled.
 */
void GPIO_Toggle(STRUCT_GPIO_REG_DEF *pGPIOx, uint8_t PinNumber)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	460b      	mov	r3, r1
 80005fa:	70fb      	strb	r3, [r7, #3]
	// Toggle the bit in the output data register corresponding to the PinNumber
	pGPIOx -> ODR ^= (1<<PinNumber);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	695b      	ldr	r3, [r3, #20]
 8000600:	78fa      	ldrb	r2, [r7, #3]
 8000602:	2101      	movs	r1, #1
 8000604:	fa01 f202 	lsl.w	r2, r1, r2
 8000608:	405a      	eors	r2, r3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	615a      	str	r2, [r3, #20]
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
	...

0800061c <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
  STRUCT_GPIO_HANDLER  Green;

		/* initializing ALL GOOD LED on GPIOD */
	Green.pGPIOx = GPIOD;
 8000622:	4b0b      	ldr	r3, [pc, #44]	@ (8000650 <main+0x34>)
 8000624:	607b      	str	r3, [r7, #4]
	Green.GPIO_PinConfig.GPIO_PinNumber 		= GPIO_PIN_NO_12;
 8000626:	230c      	movs	r3, #12
 8000628:	723b      	strb	r3, [r7, #8]
	Green.GPIO_PinConfig.GPIO_PinMode  			= GPIO_MODE_OP;
 800062a:	2301      	movs	r3, #1
 800062c:	727b      	strb	r3, [r7, #9]
	Green.GPIO_PinConfig.GPIO_PinOPType 		= GPIO_OP_TYPE_PP;
 800062e:	2300      	movs	r3, #0
 8000630:	733b      	strb	r3, [r7, #12]
	Green.GPIO_PinConfig.GPIO_PinPuPdControl 	= GPIO_NO_PUPD;
 8000632:	2300      	movs	r3, #0
 8000634:	72fb      	strb	r3, [r7, #11]

	GPIO_PClkCtrl(GPIOD,ENABLE);
 8000636:	2101      	movs	r1, #1
 8000638:	4805      	ldr	r0, [pc, #20]	@ (8000650 <main+0x34>)
 800063a:	f7ff fdc5 	bl	80001c8 <GPIO_PClkCtrl>
	GPIO_Init(&Green);
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff fe6f 	bl	8000324 <GPIO_Init>



	while(1)
	{
		GPIO_Toggle(GPIOD, GPIO_PIN_NO_12);
 8000646:	210c      	movs	r1, #12
 8000648:	4801      	ldr	r0, [pc, #4]	@ (8000650 <main+0x34>)
 800064a:	f7ff ffd1 	bl	80005f0 <GPIO_Toggle>
 800064e:	e7fa      	b.n	8000646 <main+0x2a>
 8000650:	40020c00 	.word	0x40020c00

08000654 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000654:	480d      	ldr	r0, [pc, #52]	@ (800068c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000656:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000658:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800065c:	480c      	ldr	r0, [pc, #48]	@ (8000690 <LoopForever+0x6>)
  ldr r1, =_edata
 800065e:	490d      	ldr	r1, [pc, #52]	@ (8000694 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000660:	4a0d      	ldr	r2, [pc, #52]	@ (8000698 <LoopForever+0xe>)
  movs r3, #0
 8000662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000664:	e002      	b.n	800066c <LoopCopyDataInit>

08000666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800066a:	3304      	adds	r3, #4

0800066c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800066c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800066e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000670:	d3f9      	bcc.n	8000666 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000672:	4a0a      	ldr	r2, [pc, #40]	@ (800069c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000674:	4c0a      	ldr	r4, [pc, #40]	@ (80006a0 <LoopForever+0x16>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000678:	e001      	b.n	800067e <LoopFillZerobss>

0800067a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800067a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800067c:	3204      	adds	r2, #4

0800067e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800067e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000680:	d3fb      	bcc.n	800067a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000682:	f000 f811 	bl	80006a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000686:	f7ff ffc9 	bl	800061c <main>

0800068a <LoopForever>:

LoopForever:
  b LoopForever
 800068a:	e7fe      	b.n	800068a <LoopForever>
  ldr   r0, =_estack
 800068c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000694:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000698:	08000710 	.word	0x08000710
  ldr r2, =_sbss
 800069c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80006a0:	2000001c 	.word	0x2000001c

080006a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a4:	e7fe      	b.n	80006a4 <ADC_IRQHandler>
	...

080006a8 <__libc_init_array>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	4d0d      	ldr	r5, [pc, #52]	@ (80006e0 <__libc_init_array+0x38>)
 80006ac:	4c0d      	ldr	r4, [pc, #52]	@ (80006e4 <__libc_init_array+0x3c>)
 80006ae:	1b64      	subs	r4, r4, r5
 80006b0:	10a4      	asrs	r4, r4, #2
 80006b2:	2600      	movs	r6, #0
 80006b4:	42a6      	cmp	r6, r4
 80006b6:	d109      	bne.n	80006cc <__libc_init_array+0x24>
 80006b8:	4d0b      	ldr	r5, [pc, #44]	@ (80006e8 <__libc_init_array+0x40>)
 80006ba:	4c0c      	ldr	r4, [pc, #48]	@ (80006ec <__libc_init_array+0x44>)
 80006bc:	f000 f818 	bl	80006f0 <_init>
 80006c0:	1b64      	subs	r4, r4, r5
 80006c2:	10a4      	asrs	r4, r4, #2
 80006c4:	2600      	movs	r6, #0
 80006c6:	42a6      	cmp	r6, r4
 80006c8:	d105      	bne.n	80006d6 <__libc_init_array+0x2e>
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80006d0:	4798      	blx	r3
 80006d2:	3601      	adds	r6, #1
 80006d4:	e7ee      	b.n	80006b4 <__libc_init_array+0xc>
 80006d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80006da:	4798      	blx	r3
 80006dc:	3601      	adds	r6, #1
 80006de:	e7f2      	b.n	80006c6 <__libc_init_array+0x1e>
 80006e0:	08000708 	.word	0x08000708
 80006e4:	08000708 	.word	0x08000708
 80006e8:	08000708 	.word	0x08000708
 80006ec:	0800070c 	.word	0x0800070c

080006f0 <_init>:
 80006f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006f2:	bf00      	nop
 80006f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006f6:	bc08      	pop	{r3}
 80006f8:	469e      	mov	lr, r3
 80006fa:	4770      	bx	lr

080006fc <_fini>:
 80006fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006fe:	bf00      	nop
 8000700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000702:	bc08      	pop	{r3}
 8000704:	469e      	mov	lr, r3
 8000706:	4770      	bx	lr
